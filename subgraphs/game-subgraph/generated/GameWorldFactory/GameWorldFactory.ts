// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class WorldCreated extends ethereum.Event {
  get params(): WorldCreated__Params {
    return new WorldCreated__Params(this);
  }
}

export class WorldCreated__Params {
  _event: WorldCreated;

  constructor(event: WorldCreated) {
    this._event = event;
  }

  get gameEngine(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get worldId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class GameWorldFactory extends ethereum.SmartContract {
  static bind(address: Address): GameWorldFactory {
    return new GameWorldFactory("GameWorldFactory", address);
  }

  createWorld(name: string): Address {
    let result = super.call("createWorld", "createWorld(string):(address)", [
      ethereum.Value.fromString(name),
    ]);

    return result[0].toAddress();
  }

  try_createWorld(name: string): ethereum.CallResult<Address> {
    let result = super.tryCall("createWorld", "createWorld(string):(address)", [
      ethereum.Value.fromString(name),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWorlds(): Array<Address> {
    let result = super.call("getWorlds", "getWorlds():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getWorlds(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getWorlds", "getWorlds():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  playerNFT(): Address {
    let result = super.call("playerNFT", "playerNFT():(address)", []);

    return result[0].toAddress();
  }

  try_playerNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall("playerNFT", "playerNFT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalWorlds(): BigInt {
    let result = super.call("totalWorlds", "totalWorlds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalWorlds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalWorlds", "totalWorlds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  worlds(param0: BigInt): Address {
    let result = super.call("worlds", "worlds(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_worlds(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("worlds", "worlds(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _playerNFT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateWorldCall extends ethereum.Call {
  get inputs(): CreateWorldCall__Inputs {
    return new CreateWorldCall__Inputs(this);
  }

  get outputs(): CreateWorldCall__Outputs {
    return new CreateWorldCall__Outputs(this);
  }
}

export class CreateWorldCall__Inputs {
  _call: CreateWorldCall;

  constructor(call: CreateWorldCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CreateWorldCall__Outputs {
  _call: CreateWorldCall;

  constructor(call: CreateWorldCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
