// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CallerWhitelisted extends ethereum.Event {
  get params(): CallerWhitelisted__Params {
    return new CallerWhitelisted__Params(this);
  }
}

export class CallerWhitelisted__Params {
  _event: CallerWhitelisted;

  constructor(event: CallerWhitelisted) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class PlotPurchased extends ethereum.Event {
  get params(): PlotPurchased__Params {
    return new PlotPurchased__Params(this);
  }
}

export class PlotPurchased__Params {
  _event: PlotPurchased;

  constructor(event: PlotPurchased) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get worldId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get x(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get y(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class WorldJoined extends ethereum.Event {
  get params(): WorldJoined__Params {
    return new WorldJoined__Params(this);
  }
}

export class WorldJoined__Params {
  _event: WorldJoined;

  constructor(event: WorldJoined) {
    this._event = event;
  }

  get player(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get worldId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class GameEngine__worldPlotsResult {
  value0: Address;
  value1: i32;
  value2: i32;

  constructor(value0: Address, value1: i32, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getX(): i32 {
    return this.value1;
  }

  getY(): i32 {
    return this.value2;
  }
}

export class GameEngine extends ethereum.SmartContract {
  static bind(address: Address): GameEngine {
    return new GameEngine("GameEngine", address);
  }

  BASE_PRICE(): BigInt {
    let result = super.call("BASE_PRICE", "BASE_PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE_PRICE", "BASE_PRICE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  GRID_SIZE(): i32 {
    let result = super.call("GRID_SIZE", "GRID_SIZE():(uint8)", []);

    return result[0].toI32();
  }

  try_GRID_SIZE(): ethereum.CallResult<i32> {
    let result = super.tryCall("GRID_SIZE", "GRID_SIZE():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  JOIN_FEE(): BigInt {
    let result = super.call("JOIN_FEE", "JOIN_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_JOIN_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("JOIN_FEE", "JOIN_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  STARTING_RESOURCE(): BigInt {
    let result = super.call(
      "STARTING_RESOURCE",
      "STARTING_RESOURCE():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_STARTING_RESOURCE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "STARTING_RESOURCE",
      "STARTING_RESOURCE():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gasTreasury(): Address {
    let result = super.call("gasTreasury", "gasTreasury():(address)", []);

    return result[0].toAddress();
  }

  try_gasTreasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("gasTreasury", "gasTreasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllPlotOwners(worldId: BigInt): Array<Address> {
    let result = super.call(
      "getAllPlotOwners",
      "getAllPlotOwners(uint256):(address[100])",
      [ethereum.Value.fromUnsignedBigInt(worldId)],
    );

    return result[0].toAddressArray();
  }

  try_getAllPlotOwners(worldId: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllPlotOwners",
      "getAllPlotOwners(uint256):(address[100])",
      [ethereum.Value.fromUnsignedBigInt(worldId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getPlayerResources(worldId: BigInt, player: Address): Array<BigInt> {
    let result = super.call(
      "getPlayerResources",
      "getPlayerResources(uint256,address):(uint256[5])",
      [
        ethereum.Value.fromUnsignedBigInt(worldId),
        ethereum.Value.fromAddress(player),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_getPlayerResources(
    worldId: BigInt,
    player: Address,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPlayerResources",
      "getPlayerResources(uint256,address):(uint256[5])",
      [
        ethereum.Value.fromUnsignedBigInt(worldId),
        ethereum.Value.fromAddress(player),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPlotOwner(worldId: BigInt, x: i32, y: i32): Address {
    let result = super.call(
      "getPlotOwner",
      "getPlotOwner(uint256,uint8,uint8):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(worldId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(x)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(y)),
      ],
    );

    return result[0].toAddress();
  }

  try_getPlotOwner(
    worldId: BigInt,
    x: i32,
    y: i32,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPlotOwner",
      "getPlotOwner(uint256,uint8,uint8):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(worldId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(x)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(y)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPlotPrice(worldId: BigInt, player: Address): BigInt {
    let result = super.call(
      "getPlotPrice",
      "getPlotPrice(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(worldId),
        ethereum.Value.fromAddress(player),
      ],
    );

    return result[0].toBigInt();
  }

  try_getPlotPrice(
    worldId: BigInt,
    player: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPlotPrice",
      "getPlotPrice(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(worldId),
        ethereum.Value.fromAddress(player),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasJoined(player: Address, worldId: BigInt): boolean {
    let result = super.call("hasJoined", "hasJoined(address,uint256):(bool)", [
      ethereum.Value.fromAddress(player),
      ethereum.Value.fromUnsignedBigInt(worldId),
    ]);

    return result[0].toBoolean();
  }

  try_hasJoined(
    player: Address,
    worldId: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasJoined",
      "hasJoined(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(player),
        ethereum.Value.fromUnsignedBigInt(worldId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  whitelistedCallers(param0: Address): boolean {
    let result = super.call(
      "whitelistedCallers",
      "whitelistedCallers(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_whitelistedCallers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whitelistedCallers",
      "whitelistedCallers(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  worldPlots(
    param0: BigInt,
    param1: i32,
    param2: i32,
  ): GameEngine__worldPlotsResult {
    let result = super.call(
      "worldPlots",
      "worldPlots(uint256,uint8,uint8):(address,uint8,uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param2)),
      ],
    );

    return new GameEngine__worldPlotsResult(
      result[0].toAddress(),
      result[1].toI32(),
      result[2].toI32(),
    );
  }

  try_worldPlots(
    param0: BigInt,
    param1: i32,
    param2: i32,
  ): ethereum.CallResult<GameEngine__worldPlotsResult> {
    let result = super.tryCall(
      "worldPlots",
      "worldPlots(uint256,uint8,uint8):(address,uint8,uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param2)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameEngine__worldPlotsResult(
        value[0].toAddress(),
        value[1].toI32(),
        value[2].toI32(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyPlotCall extends ethereum.Call {
  get inputs(): BuyPlotCall__Inputs {
    return new BuyPlotCall__Inputs(this);
  }

  get outputs(): BuyPlotCall__Outputs {
    return new BuyPlotCall__Outputs(this);
  }
}

export class BuyPlotCall__Inputs {
  _call: BuyPlotCall;

  constructor(call: BuyPlotCall) {
    this._call = call;
  }

  get worldId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get player(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get x(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get y(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class BuyPlotCall__Outputs {
  _call: BuyPlotCall;

  constructor(call: BuyPlotCall) {
    this._call = call;
  }
}

export class JoinWorldCall extends ethereum.Call {
  get inputs(): JoinWorldCall__Inputs {
    return new JoinWorldCall__Inputs(this);
  }

  get outputs(): JoinWorldCall__Outputs {
    return new JoinWorldCall__Outputs(this);
  }
}

export class JoinWorldCall__Inputs {
  _call: JoinWorldCall;

  constructor(call: JoinWorldCall) {
    this._call = call;
  }

  get worldId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class JoinWorldCall__Outputs {
  _call: JoinWorldCall;

  constructor(call: JoinWorldCall) {
    this._call = call;
  }
}

export class PauseGameCall extends ethereum.Call {
  get inputs(): PauseGameCall__Inputs {
    return new PauseGameCall__Inputs(this);
  }

  get outputs(): PauseGameCall__Outputs {
    return new PauseGameCall__Outputs(this);
  }
}

export class PauseGameCall__Inputs {
  _call: PauseGameCall;

  constructor(call: PauseGameCall) {
    this._call = call;
  }
}

export class PauseGameCall__Outputs {
  _call: PauseGameCall;

  constructor(call: PauseGameCall) {
    this._call = call;
  }
}

export class ResumeGameCall extends ethereum.Call {
  get inputs(): ResumeGameCall__Inputs {
    return new ResumeGameCall__Inputs(this);
  }

  get outputs(): ResumeGameCall__Outputs {
    return new ResumeGameCall__Outputs(this);
  }
}

export class ResumeGameCall__Inputs {
  _call: ResumeGameCall;

  constructor(call: ResumeGameCall) {
    this._call = call;
  }
}

export class ResumeGameCall__Outputs {
  _call: ResumeGameCall;

  constructor(call: ResumeGameCall) {
    this._call = call;
  }
}

export class SetGasTreasuryCall extends ethereum.Call {
  get inputs(): SetGasTreasuryCall__Inputs {
    return new SetGasTreasuryCall__Inputs(this);
  }

  get outputs(): SetGasTreasuryCall__Outputs {
    return new SetGasTreasuryCall__Outputs(this);
  }
}

export class SetGasTreasuryCall__Inputs {
  _call: SetGasTreasuryCall;

  constructor(call: SetGasTreasuryCall) {
    this._call = call;
  }

  get _gasTreasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGasTreasuryCall__Outputs {
  _call: SetGasTreasuryCall;

  constructor(call: SetGasTreasuryCall) {
    this._call = call;
  }
}

export class SetWhitelistedCallerCall extends ethereum.Call {
  get inputs(): SetWhitelistedCallerCall__Inputs {
    return new SetWhitelistedCallerCall__Inputs(this);
  }

  get outputs(): SetWhitelistedCallerCall__Outputs {
    return new SetWhitelistedCallerCall__Outputs(this);
  }
}

export class SetWhitelistedCallerCall__Inputs {
  _call: SetWhitelistedCallerCall;

  constructor(call: SetWhitelistedCallerCall) {
    this._call = call;
  }

  get caller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetWhitelistedCallerCall__Outputs {
  _call: SetWhitelistedCallerCall;

  constructor(call: SetWhitelistedCallerCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
